package fr.WizardStoneCraft.Commands.Reputation;

import com.earth2me.essentials.api.Economy;
import fr.WizardStoneCraft.WizardStoneCraft;
import net.milkbowl.vault.economy.EconomyResponse;
import org.bukkit.*;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.generator.structure.Structure;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.metadata.FixedMetadataValue;

import java.util.*;

import static com.booksaw.betterTeams.Main.econ;
import static fr.WizardStoneCraft.Commands.Reputation.repspawnnpc.isPassive;

public class RÃ©putationListener implements Listener {
    //reputation
    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        UUID playerId = player.getUniqueId();

        // VÃ©rifie si la rÃ©putation du joueur est infÃ©rieure ou Ã©gale Ã  la valeur seuil
        int newRep = WizardStoneCraft.getInstance().reputation.getOrDefault(playerId, WizardStoneCraft.getInstance().loadPlayerReputation(playerId)) + WizardStoneCraft.getInstance().pointsJoin;
        WizardStoneCraft.getInstance().reputation.put(playerId, Math.min(newRep, WizardStoneCraft.getInstance().MAX_REP));
        player.sendMessage(WizardStoneCraft.getInstance().getMessage("reputation_gained"));
        WizardStoneCraft.getInstance().savePlayerReputation(playerId, Math.min(newRep, WizardStoneCraft.getInstance().MAX_REP));
        if (isPassive(player)) {
            player.setDisplayName(ChatColor.GREEN + player.getName());
        } else {
            player.setDisplayName(ChatColor.AQUA + player.getName()); // Cyan pour joueurs protÃ©gÃ©s
        }
        WizardStoneCraft.getInstance().protectedPlayers.put(player.getUniqueId(), System.currentTimeMillis());
        player.sendMessage("Â§7[Â§e?Â§7] Â§aVous Ãªtes protÃ©gÃ© pendant 90 secondes aprÃ¨s votre connexion Â§7[Â§c!Â§7]");

    }

    @EventHandler
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        UUID playerId = player.getUniqueId();
        int rep = WizardStoneCraft.getInstance().reputation.getOrDefault(playerId, WizardStoneCraft.getInstance().loadPlayerReputation(playerId));
        String prefix = WizardStoneCraft.getInstance().getReputationStatus(rep);
        String gradePrefix = WizardStoneCraft.getInstance().getLuckPermsPrefix(player);
        event.setFormat(prefix + " " + ChatColor.RESET + "<%1$s> %2$s");
        Player players = event.getPlayer();

    }

    @EventHandler
    public void onPlayerChats(AsyncPlayerChatEvent event) {
        Player player = event.getPlayer();
        UUID playerId = player.getUniqueId();
        long currentTime = System.currentTimeMillis();

        // VÃ©rifie si le joueur est mute
        if (WizardStoneCraft.getInstance().mutedPlayers.containsKey(playerId)) {
            long muteExpiration = WizardStoneCraft.getInstance().mutedPlayers.get(playerId);
            if (muteExpiration > currentTime) {
                player.sendMessage(WizardStoneCraft.getInstance().getMessage("chat_muted"));
                event.setCancelled(true);
            } else {
                unmutePlayer(playerId); // Supprime le mute si expirÃ©
            }
        }
    }

    public void unmutePlayer(UUID playerId) {
        WizardStoneCraft.getInstance().mutedPlayers.remove(playerId);
    }

    @EventHandler
    public void onPlayerDeathsssssssss(PlayerDeathEvent event) {
        Player victim = (Player) event.getEntity();
        ;
        Player killer = victim.getKiller();

        if (killer == null || killer == victim) return; // Pas de suicide ou de mort sans tueur

        UUID killerUUID = killer.getUniqueId();
        UUID victimUUID = victim.getUniqueId();
        long currentTime = System.currentTimeMillis();

        // Initialiser l'historique du tueur si inexistant
        WizardStoneCraft.getInstance().killHistory.putIfAbsent(killerUUID, new HashMap<>());

        HashMap<UUID, Long> killerRecords = (HashMap<UUID, Long>) WizardStoneCraft.getInstance().killHistory.get(killerUUID);

        // VÃ©rifie si le tueur a dÃ©jÃ  tuÃ© cette victime
        if (killerRecords.containsKey(victimUUID)) {
            long lastKillTime = killerRecords.get(victimUUID);

            // VÃ©rifie si c'Ã©tait dans les derniÃ¨res 48 heures
            if (currentTime - lastKillTime < 172800000L) { // 48h en millisecondes
                killer.sendMessage(net.md_5.bungee.api.ChatColor.RED + "âš  Focus de kill dÃ©tectÃ© ! Vous perdez 20 points de rÃ©putation.");
                victim.sendMessage(net.md_5.bungee.api.ChatColor.YELLOW + "ðŸš¨ " + killer.getName() + " vous a tuÃ© en moins de 48h. Un modÃ©rateur peut Ãªtre alertÃ©.");

                // Appliquer la pÃ©nalitÃ© de rÃ©putation
                applyReputationPenalty(killer, 20);

                // Notifier les modÃ©rateurs
                for (Player admin : Bukkit.getOnlinePlayers()) {
                    if (admin.hasPermission("wizardstonecraft.moderator")) {
                        admin.sendMessage(net.md_5.bungee.api.ChatColor.RED + "âš  " + killer.getName() + " a tuÃ© " + victim.getName() + " en moins de 48h !");
                        admin.sendMessage(net.md_5.bungee.api.ChatColor.RED + "âž¡ Une intervention peut Ãªtre nÃ©cessaire.");
                    }
                }

                return;
            }
        }

        // Mettre Ã  jour l'historique du tueur
        killerRecords.put(victimUUID, currentTime);
    }

    private void applyReputationPenalty(Player player, int amount) {
        // Exemple : Ajout d'une mÃ©thode pour gÃ©rer la rÃ©putation du joueur
        WizardStoneCraft.getInstance().getReputation(player);
        WizardStoneCraft.getInstance().removeReputation(player, amount);
    }

    private final Map<UUID, List<Long>> killTimestamps = new HashMap<>();

    @EventHandler
    public void onPlayerKill(PlayerDeathEvent event) {
        Player victim = event.getEntity();
        Player killer = victim.getKiller();

        if (killer != null) {
            UUID killerId = killer.getUniqueId();
            long now = System.currentTimeMillis();

            // Charger la liste des kills du joueur
            List<Long> timestamps = killTimestamps.getOrDefault(killerId, new ArrayList<>());

            // Supprimer les kills plus vieux que 48h (172800000 ms)
            timestamps.removeIf(time -> now - time > 172800000);

            // VÃ©rifier si le joueur a tuÃ© moins de 2 fois dans les 48h
            if (timestamps.size() < 2) {
                int currentRep = WizardStoneCraft.getInstance().reputation.getOrDefault(killerId, WizardStoneCraft.getInstance().loadPlayerReputation(killerId));
                int newRep = Math.max(currentRep + WizardStoneCraft.getInstance().pointsKills, -2);

                // Mettre Ã  jour la rÃ©putation et sauvegarder
                WizardStoneCraft.getInstance().reputation.put(killerId, newRep);
                WizardStoneCraft.getInstance().savePlayerReputation(killerId, newRep);

                // Ajouter le kill actuel Ã  la liste
                timestamps.add(now);
                killTimestamps.put(killerId, timestamps);

                // Envoyer le message au joueur
                String message = WizardStoneCraft.getInstance().getMessage("reputation_lost");
                if (message != null) {
                    killer.sendMessage(ChatColor.RED + message.replace("%points%", String.valueOf(newRep)));
                } else {
                    killer.sendMessage(ChatColor.RED + "Â§7[Â§e?Â§7]Â§c Vous avez perdu " + Math.abs(WizardStoneCraft.getInstance().pointsKills) +
                            " points de rÃ©putation. Nouvelle rÃ©putation : " + newRep);
                }
            } else {
                killer.sendMessage(ChatColor.GRAY + "Â§7[Â§e?Â§7]Â§a Vous avez atteint la limite de perte de rÃ©putation pour 48h.");
            }
        }
    }


    @EventHandler
    public void onPlayerEnterTrialChamber(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        Location loc = player.getLocation();
        World world = loc.getWorld();

        // Trouver la Trial Chamber la plus proche
        Location trialChamberLocation = (Location) world.locateNearestStructure(loc, Structure.TRIAL_CHAMBERS, 10, false);

        // VÃ©rifier que la structure existe et que le joueur est dedans
        if (trialChamberLocation != null && loc.distanceSquared(trialChamberLocation) < 100) {
            UUID playerUUID = player.getUniqueId();

            // VÃ©rifie si le joueur a dÃ©jÃ  complÃ©tÃ© la quÃªte
            if (!player.hasMetadata("completed_trial_quest")) {
                player.setMetadata("completed_trial_quest", new FixedMetadataValue(WizardStoneCraft.getInstance(), true));

                // Ajoute la rÃ©putation
                WizardStoneCraft.getInstance().addReputation(playerUUID, 10);

                // Ajoute l'argent (si Vault est installÃ©)
                boolean economy = WizardStoneCraft.getInstance().setupEconomy();
                EconomyResponse response = econ.depositPlayer(player, 1000);

                if (response.transactionSuccess()) {
                    player.sendMessage(ChatColor.GREEN + "Vous avez complÃ©tÃ© la quÃªte ! +10 RÃ©putation et 1000â‚¬ !");
                } else {
                    player.sendMessage(ChatColor.RED + "Erreur lors de l'ajout de l'argent.");
                }
            } else {
                player.sendMessage(ChatColor.YELLOW + "Vous avez dÃ©jÃ  complÃ©tÃ© cette quÃªte !");
            }
        }
    }



    // MÃ©thode pour ouvrir l'interface de quÃªte


    // Gestion de l'Ã©vÃ©nement lorsque le joueur clique dans l'interface


    // DÃ©marrer la quÃªte (enregistrÃ© dans les mÃ©tadonnÃ©es du joueur)






    //reputation
}
